name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]  # Define the OS matrix
        target:  # Define the target triple for each OS
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Set repository name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      # Install dependencies on Linux
      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev

      # Install dependencies on macOS
      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: brew install openssl

      # Install dependencies on Windows
      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        run: vcpkg install openssl:x64-windows

      # Set up Rust toolchain using rustup
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Build the Rust project in release mode
      - name: Build the binary
        env:
          # Set OPENSSL_DIR on macOS to point to the correct location
          OPENSSL_DIR: ${{ runner.os == 'macOS' && '/usr/local/opt/openssl' || '' }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive binary on Linux/Mac
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ env.REPO_NAME }} artifacts/${{ env.REPO_NAME }}-${{ matrix.os }}

      - name: Archive binary on Windows
        if: runner.os == 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ env.REPO_NAME }}.exe artifacts/${{ env.REPO_NAME }}-${{ matrix.os }}.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-${{ matrix.os }}
          path: artifacts/${{ env.REPO_NAME }}-${{ matrix.os }}*

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: |
            ${{ env.REPO_NAME }}-ubuntu-latest
            ${{ env.REPO_NAME }}-macos-latest
            ${{ env.REPO_NAME }}-windows-latest.exe

      - name: Read CHANGELOG.md
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.REPO_NAME }}-ubuntu-latest
            ${{ env.REPO_NAME }}-macos-latest
            ${{ env.REPO_NAME }}-windows-latest.exe
          body: ${{ env.CHANGELOG_CONTENT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}